/*
 * Copyright 2017 a2tirb
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.gradle.internal.os.OperatingSystem
import java.nio.file.Files
import java.nio.file.Paths;

buildscript {
    ext {
        springBootVersion = '2.0.0.BUILD-SNAPSHOT'
    }
    repositories {
        maven { url 'https://repo.spring.io/libs-snapshot' }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

// https://stackoverflow.com/questions/3963708/gradle-how-to-display-test-results-in-the-console-in-real-time/20359498
test {
    afterTest { desc, result ->
        logger.quiet "Executing test ${desc.name} [${desc.className}] with result: ${result.resultType}"
    }
}

repositories {
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
    maven { url "https://repo.spring.io/release" }
    maven {
        url "https://dl.bintray.com/palantir/releases" // docker-compose-rule is published on bintray
    }
    mavenCentral()
}

jar {
    baseName = 'visual-search-spring-boot'
    version = '0.1.0'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext['elasticsearch.version'] = '6.4.0'

dependencies {

    compile("org.springframework.boot:spring-boot-starter-webflux:2.0.0.BUILD-SNAPSHOT")
    compile("org.springframework.boot:spring-boot-starter-jetty:2.0.0.BUILD-SNAPSHOT")
    compile("org.springframework.boot:spring-boot-starter-actuator:2.0.0.BUILD-SNAPSHOT")
    compile("org.apache.httpcomponents:httpclient:4.3.6")
    compile("org.apache.httpcomponents:httpasyncclient:4.0.2")
    compile("org.apache.httpcomponents:httpmime:4.3.6")
    compile("commons-io:commons-io:2.4")
    compile("org.json:json:20140107")
    compile("org.openpnp:3.4.2")

    testCompile("org.springframework.boot:spring-boot-starter-test:2.0.0.BUILD-SNAPSHOT")
    testCompile("io.projectreactor:reactor-test:3.1.1.RELEASE")
    testCompile("org.apache.logging.log4j:log4j-core:2.9.1")
    testCompile("com.palantir.docker.compose:docker-compose-rule-junit4:0.32.1")
}

//OpenCV build
//sourceCompatibility = 1.6
//targetCompatibility = 1.6

def date = new Date()
def formattedDate = date.format('yyMMdd')
version = "3.2.0-${formattedDate}"

def cmakeBuildDirectory = Paths.get(projectDir.canonicalPath, "build")
def jarName = "${project.name}-${version.replace(".", "").replace("-" + formattedDate, "")}.jar"
def pathToOpenCVJar = cmakeBuildDirectory.resolve("bin").resolve(jarName)

def osName = ""

if(OperatingSystem.current().isWindows()){
    osName = "win64"
}

if(OperatingSystem.current().isLinux()){
    osName = "linux64"
}

if(OperatingSystem.current().isMacOsX()){
    osName = "osx"
}

task cmake(type: Exec) {
    if(!Files.exists(cmakeBuildDirectory))
    {
        Files.createDirectories(cmakeBuildDirectory)
    }

    workingDir cmakeBuildDirectory.toString()

    if(OperatingSystem.current().isWindows())
    {
        executable = 'cmd'
        args = ['/c', 'cmake', '-DCMAKE_BUILD_TYPE=RELEASE', '-DBUILD_SHARED_LIBS=OFF', '-DWITH_CUDA=OFF', '-DWITH_FFMPEG=OFF', '-DWITH_OPENEXR=ON', '-DWITH_WEBP=ON', '-DBUILD_WITH_STATIC_CRT=ON', '-DOPENCV_EXTRA_MODULES_PATH=../opencv_contrib/modules', '-DBUILD_opencv_hdf=OFF', '-G', '"Visual Studio 15 2017 Win64"', '../opencv']
    }
    else
    {
        executable = 'cmake'
        args = ['-DCMAKE_BUILD_TYPE=RELEASE', '-DBUILD_SHARED_LIBS=OFF', '-DWITH_CUDA=OFF', '-DWITH_FFMPEG=OFF', '-DWITH_OPENEXR=ON', '-DWITH_WEBP=ON', '-DOPENCV_EXTRA_MODULES_PATH=../opencv_contrib/modules', '-DBUILD_opencv_hdf=OFF', '../opencv']
    }
}

task make(type: Exec, dependsOn: cmake) {
    workingDir cmakeBuildDirectory.toString()
    def processors = Runtime.runtime.availableProcessors()

    if(OperatingSystem.current().isWindows())
    {
        executable = 'cmd'
        args = ['/c', 'msbuild', '/m', 'OpenCV.sln', '/t:Build', '/p:Configuration=Release', '/v:m']
    }
    else
    {
        executable = 'make'
        args = ["-j${processors}"]
    }

    outputs.file pathToOpenCVJar.toFile()
    outputs.file cmakeBuildDirectory.resolve("src").toFile()
}

task openCVPlatformJar(type: Jar, dependsOn: make) {
    baseName = "${project.name}-java-natives-${osName}"

    manifest {
        attributes(
                "Created-By": "IHMC Gradle Build Script",
                "Implementation-Title": "OpenCV Native Library, ${osName}",
                "Implementation-Version": project.version,
                "Implementation-Vendor": "Itseez",

                "Bundle-Name": "${baseName}",
                "Bundle-Version": project.version,
                "Bundle-License": "https://opensource.org/licenses/BSD-3-Clause",
                "Bundle-Vendor": "IHMC")
    }

    if(!OperatingSystem.current().isWindows()){
        from(cmakeBuildDirectory.resolve("lib").toFile()) {
            include '*java*.so'
            include '*java*.dylib'
            into 'org/opencv'
        }
    }
    else {
        from(cmakeBuildDirectory.resolve("bin").resolve("Release").toFile()) {
            include '*java*.dll'
            into 'org/opencv'
        }
    }
}

task openCVJar(type: Jar, dependsOn: make) {
    manifest {
        attributes(
                "Created-By": "IHMC Gradle Build Script",
                "Implementation-Title": "OpenCV",
                "Implementation-Version": project.version,
                "Implementation-Vendor": "Itseez",

                "Bundle-Name": project.name,
                "Bundle-Version": project.version,
                "Bundle-License": "https://opensource.org/licenses/BSD-3-Clause",
                "Bundle-Vendor": "IHMC")
    }

    from { zipTree(pathToOpenCVJar.toFile()) } {
        exclude "META-INF/*"
        exclude "META-INF"
    }
}

task openCVSourceJar(type: Jar, dependsOn: make) {
    classifier = "sources"
    manifest {
        attributes(
                "Created-By": "IHMC Gradle Build Script",
                "Implementation-Title": "OpenCV Java Sources",
                "Implementation-Version": project.version,
                "Implementation-Vendor": "Itseez",

                "Bundle-Name": "${project.name}-sources",
                "Bundle-Version": project.version,
                "Bundle-License": "https://opensource.org/licenses/BSD-3-Clause",
                "Bundle-Vendor": "IHMC")
    }

    from(cmakeBuildDirectory.resolve("src").toFile()) {
        include '**/*.java'
    }
}